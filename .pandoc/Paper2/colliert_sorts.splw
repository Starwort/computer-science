FUNCTION range <- INT end -> LIST AS
    SET rv TO CREATE LIST
    SET index TO 0
    WHILE index < end DO
        CALL rv.append WITH index
        INC index
    END WHILE
RETURN rv

FUNCTION enumerate <- LIST my_list -> LIST AS
    SET rv TO CREATE LIST
    FOR index OF CALL range WITH my_list.length
        CALL rv.append WITH (index, my_list[index])
    END FOR
RETURN rv

FUNCTION get_slice_of_list <- LIST my_list, INT slice_start, INT slice_end -> LIST AS
    SET rv TO CREATE LIST
    SET index TO slice_start % my_list.length
    WHILE index < slice_end % my_list.length DO
        CALL rv.append WITH my_list[index]
        INC index
    END WHILE
RETURN rv

FUNCTION merge_sort <- LIST to_be_sorted -> LIST AS
    SET to_be_sorted TO CALL to_be_sorted.copy
    SET rv TO FALSE
    IF to_be_sorted.length = 1 DO
        SET rv TO to_be_sorted
    END IF
    IF rv = FALSE DO
        SET divider TO to_be_sorted.length DIVI 2
        SET left TO CALL merge_sort WITH (CALL get_slice_of_list WITH to_be_sorted, 0, divider)
        SET right TO CALL merge_sort WITH (CALL get_slice_of_list WITH to_be_sorted, divider, -1)
        CALL right.append WITH to_be_sorted[-1] // my get_slice_of_list function doesn't let me get the last element of the LIST
        SET rv TO CREATE LIST
        SET empty_list TO CREATE LIST
        WHILE left =/= empty_list AND right =/= empty_list DO
            IF left[0] < right[0] DO
                CALL rv.append WITH CALL left.pop WITH 0
            ELSE DO
                CALL rv.append WITH CALL right.pop WITH 0
            END IF
        END WHILE
        CALL rv.extend WITH left
        CALL rv.extend WITH right
    END IF
RETURN rv

FUNCTION bubble_sort <- LIST to_be_sorted -> LIST AS
    SET to_be_sorted TO CALL to_be_sorted.copy
    SET swapped TO TRUE
    SET sorted TO 0
    WHILE swapped DO
        INC sorted
        SET swapped TO FALSE
        FOR index OF CALL range WITH to_be_sorted.length - sorted DO
            IF to_be_sorted[index] > to_be_sorted[index + 1] DO
                SET swapped TO TRUE
                SET tmp TO to_be_sorted[index + 1]
                SET to_be_sorted[index + 1] TO to_be_sorted[index]
                SET to_be_sorted[index] TO tmp
            END IF
        END FOR
    END WHILE
RETURN to_be_sorted

FUNCTION insertion_sort <- LIST to_be_sorted -> LIST AS
    SET to_be_sorted TO CALL to_be_sorted.copy
    SET rv TO FALSE
    IF to_be_sorted.length = 1 DO
        SET rv TO to_be_sorted
    END IF
    IF rv = FALSE DO
        SET rv TO CREATE LIST
        FOR item OF to_be_sorted DO
            SET used_item TO FALSE
            FOR pair OF CALL enumerate WITH rv DO
                SET index TO pair[0]
                SET elem TO pair[1]
                IF (NOT used_item) AND elem > item DO
                    CALL rv.insert WITH index, item
                    SET used_item TO TRUE
                END IF
            END FOR
            IF NOT used_item DO
                CALL sorted.append WITH item
            END IF
        END FOR
    END IF
RETURN rv
