---
layout: default
title: medium_tasks | Computer Science
footer: Preprocessed by AutoDocs.preprocess 2.0.0 "clean rewrite and preprocessing" â“’ Starwort, 2020
---

// https://peterhigginson.co.uk/lmc/
// task 1
1_00    INP // gets the first number
1_01    STA 0 // store the number at index 0 (this overwrites the first INP but we aren't going back there)
1_02    INP // gets the second number
1_03    ADD 0 // add the first number
1_04    STA 0 // overwrite the total with the new total
1_05    INP // gets the third number
1_06    ADD 0 // adds the total of the other two
1_07    OUT // print the total
// task 2
2_00    INP // input x
2_01    STA 0 // save x to address 0
2_02    INP // input y
2_03    ADD 0 // add x to y
2_04    STA 0 // save (x + y) to address 0
2_05    INP // input z
2_06    ADD 0 // add (x + y) to z
2_07    STA 0 // save (x + y + z) to address 0
2_08    INP // input a
2_09    SUB 0 // subtract (x + y + z) from a
2_10    STA 0 // save (a - x - y - z) to address 0
2_11    INP // input b
2_12    STA 1 // store b to address 1
2_13    LDA NULL // load const 0
2_14    SUB 1 // subtract b from 0 (gives -b)
2_15    SUB 0 // subtract (a - x - y - z) from -b (gives x + y + z - a - b)
2_16    OUT // print the answer
// task 3
3_00    INP // input first
3_01    STA 0 // store first to address 0
3_02    INP // input second
3_03    STA 1 // store second to address 1
3_04    ADD 0 // calculate first + second
3_05    OUT // print result
3_06    LDA 0 // load first
3_07    SUB 1 // subtract second
3_08    OUT // print result
// task 4
// 00           INP             inputs a number
// 01           STA FIRST       stores it in label 'FIRST'
// 02           INP             inputs another number
// 03           STA SECOND      stores it in label 'SECOND'
// 04           LDA FIRST       loads the first number
// 05           SUB SECOND      subtracts the second
// 06           BRZ SAME        if the result was 0, jump to label 'SAME'
// 07           LDA ONE         load const 1
// 08           OUT             print 1
// 09           HLT             stop
// 10   SAME    OUT             print 0. This is label 'SAME'
// 11           HLT             stop
// 12   FIRST   DAT             empty data instruction. This is label 'FIRST'
// 13   SECOND  DAT             empty data instruction. This is label 'SECOND'
// 14   ONE     DAT 1           literal data 1. This is label 'ONE'
// task 5
        INP
        STA 0
        INP
        STA 1
        LDA 0
        SUB 1
        BRZ SAME
        ADD 1
        ADD 1
        OUT
        BRA L_TASK6
SAME    OUT
// task 6
L_TASK6 INP
        STA 0
        INP
        SUB 0
        BRP L_6BIG
        LDA 0
        BRA L_6OUT
L_6BIG  ADD 0
L_6OUT  OUT
// task 7
        INP
        STA 0
        INP
        SUB 0
        BRP L_7BIG
        LDA 0
        BRA L_7STA
L_7BIG  ADD 0
L_7STA  STA 0
        INP
        SUB 0
        BRP L_7BIG2
        LDA 0
        BRA L_7OUT
L_7BIG2 ADD 0
L_7OUT  OUT
// task 8
// 00           INP             takes input
// 01           STA first       stores it in 'first'
// 02           INP             takes more input
// 03           STA second      stores it in 'second'
// 04           LDA first       loads 'first'
// 05   looptop ADD second      label 'looptop'. adds 'second'
// 06           BRP done        if it's positive, jump to done
// 07           BRA looptop     jump to 'looptop'
// 08   done    OUT             label 'done'. prints
// 09           HLT             stop
// 10   first   DAT             label 'first'. empty data
// 11   second  DAT             label 'second'. empty data
// task 9
        INP
        STA 0
        BRZ L_9OUT
        LDA NULL
L_9LOOP ADD 0
        STA 0
        INP
        BRZ L_9OUT
        BRA L_9LOOP
L_9OUT  OUT
// task 10
        INP
        STA 0
        STA 2
        INP
        STA 1
L_10LS  LDA 1
        BRZ L_10OUT
        SUB ONE
        STA 1
        LDA 0
        ADD 2
        STA 0
        BRA L_10LS
L_10OUT LDA 0
        OUT
        HLT
ONE     DAT 1
NULL    DAT 0
